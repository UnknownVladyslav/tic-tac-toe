{"version":3,"sources":["components/Square/Square.js","components/GameField/GameField.js","components/GameOverWindow.js","components/App.js","index.js"],"names":["arisingAnimation","keyframes","StyledSquare","styled","div","Symbol","p","Square","changeTurn","index","React","useState","symbol","setSymbol","disabled","setDisabled","as","onClick","GameField","squares","gameOver","className","map","square","StyledGameOverWindow","StyledButton","button","GameOverWindow","player","newGame","App","load","setLoad","Array","fill","setSquares","currentTurn","setTurn","setGameOver","checkWinCondition","winConditions","i","length","line","copiedSquares","slice","key","Global","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"mPAGMA,EAAmBC,YAAH,2EAKhBC,EAAeC,IAAOC,IAAV,mZAaHJ,GAQTK,EAASF,IAAOG,EAAV,mGAyBGC,EAlBA,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,MAAW,EACRC,IAAMC,SAAS,MADP,mBAC7BC,EAD6B,KACrBC,EADqB,OAEJH,IAAMC,UAAS,GAFX,mBAE7BG,EAF6B,KAEnBC,EAFmB,KASpC,OACI,mCACI,cAACb,EAAD,CAAcc,GAAG,SAASC,QAPlC,WACIJ,EAAUL,EAAWC,IACrBM,GAAY,IAKsCD,SAAUA,EAAxD,SACI,cAACT,EAAD,UAASO,SCxBVM,G,MApBG,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASX,EAA0B,EAA1BA,WAAYY,EAAc,EAAdA,SAErC,OACI,mCACI,qBAAKC,UAAW,cAAhB,SACKF,EAAQG,KAAI,SAACC,EAAQd,GAClB,OAAO,cAAC,EAAD,CAEHc,OAAQA,EACRf,WAAYA,EACZC,MAAOA,EAAQ,EACfW,SAAUA,GAJLX,EAAQ,YCK/Be,EAAuBrB,IAAOC,IAAV,2QAcbqB,EAAetB,IAAOuB,OAAV,sWAmBVC,EA9CQ,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAG7B,OACI,mCACI,eAACL,EAAD,WACI,6CAAgBI,EAAhB,cACA,cAACH,EAAD,CAAcR,QAAS,kBAAMY,KAA7B,4BCwEDC,G,MA5EH,WAAO,IAAD,EACUnB,oBAAS,GADnB,mBACPoB,EADO,KACDC,EADC,OAEgBrB,mBAASsB,MAAM,GAAGC,KAAK,OAFvC,mBAEPf,EAFO,KAEEgB,EAFF,OAGiBxB,mBAAS,GAH1B,mBAGPyB,EAHO,KAGMC,EAHN,OAIkB1B,oBAAS,GAJ3B,mBAIPS,EAJO,KAIGkB,EAJH,KAMd,SAASC,IAcL,IAbA,IAAIC,EAAgB,CAChB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGPZ,EAAUQ,EAAc,IAAM,EAAK,IAAM,IAEpCK,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAC3C,IAAME,EAAOH,EAAcC,GAC3B,GAAIG,EAAcD,EAAK,MAAQf,GACxBgB,EAAcD,EAAK,MAAQf,GAC3BgB,EAAcD,EAAK,MAAQf,EAE9B,OAAOU,GAAY,GAG3B,OAAO,KAGX,IAAIM,EAAgBzB,EAAQ0B,QAyB5B,OACI,qBAAKxB,UAAW,aAAhB,SACI,qBAAKA,UAAW,YAAhB,SACKD,EACG,cAAC,EAAD,CAAgBQ,OAASQ,EAAc,IAAM,EAAK,IAAM,IAAKP,QAX7E,WACIM,EAAYF,MAAM,GAAGC,KAAK,OAC1BI,GAAY,MAWAP,EACI,qCACA,sCAAUK,EAAc,IAAM,EAAK,QAAU,SAA7C,oBACA,cAAC,EAAD,CAAWjB,QAASyB,EAAepC,WAhCvD,SAAoBsC,GAEhB,OADAT,EAAQD,EAAc,GAClBA,EAAc,IAAM,GACpBQ,EAAcE,EAAM,GAAK,IACzBX,EAAWS,GACXL,IACO,MAEPK,EAAcE,EAAM,GAAK,IACzBX,EAAWS,GACXL,IACO,MAqBgEnB,SAAUA,OAGrE,cAACK,EAAD,CAAcR,QAAS,kBAAMe,GAAQ,IAAOX,UAAW,cAAvD,+BCrElB0B,G,MAASC,YAAH,uGAQZC,IAASC,OACL,qCACI,cAACH,EAAD,IACA,cAAC,EAAD,OAEJI,SAASC,eAAe,W","file":"static/js/main.004a0fc1.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled, {keyframes} from 'styled-components'\r\n\r\nconst arisingAnimation = keyframes`\r\n  0% { opacity: 0; } \r\n  100% { opacity: 1; }\r\n`\r\n\r\nconst StyledSquare = styled.div`\r\n  color: darkslateblue;\r\n  padding: 15px;\r\n  background-color: whitesmoke;\r\n  border: 2px solid #333;\r\n  border-radius: 10px;\r\n  margin: 3px;\r\n  cursor: pointer;\r\n  outline: none;\r\n  width: 20px;\r\n  height: 20px;\r\n  position: relative;\r\n  transition: all .4s ease;\r\n  animation: ${arisingAnimation} .5s forwards;\r\n  \r\n &:hover {\r\n   border-color: blueviolet;\r\n   transform: scale(1.05)\r\n } \r\n`\r\n\r\nconst Symbol = styled.p`\r\n  position: absolute;\r\n  top: 10%;\r\n  right: 25%;\r\n  font-size: 23px;\r\n`\r\n\r\nconst Square = ({changeTurn, index}) => {\r\n    const [symbol, setSymbol] = React.useState(null)\r\n    const [disabled, setDisabled] = React.useState(false)\r\n\r\n    function addSymbol() {\r\n        setSymbol(changeTurn(index))\r\n        setDisabled(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <StyledSquare as='button' onClick={addSymbol} disabled={disabled}>\r\n                <Symbol>{symbol}</Symbol>\r\n            </StyledSquare>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Square","import React from 'react'\r\nimport Square from \"../Square/Square\";\r\nimport './GameField.scss'\r\n\r\nconst GameField = ({squares, changeTurn, gameOver}) => {\r\n    // debugger\r\n    return (\r\n        <>\r\n            <div className={'gameWrapper'}>\r\n                {squares.map((square, index) => {\r\n                    return <Square\r\n                        key={index + 1}\r\n                        square={square}\r\n                        changeTurn={changeTurn}\r\n                        index={index + 1}\r\n                        gameOver={gameOver}\r\n                    />\r\n                })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GameField","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst GameOverWindow = ({player, newGame}) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <StyledGameOverWindow>\r\n                <h2>The player {player} has won</h2>\r\n                <StyledButton onClick={() => newGame()}>New game</StyledButton>\r\n            </StyledGameOverWindow>\r\n        </>\r\n    )\r\n}\r\n\r\nconst StyledGameOverWindow = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  //border: 3px solid black;\r\n  //border-radius: 25px;\r\n  min-width: 500px;\r\n  min-height: 200px;\r\n  \r\n  h2 {\r\n    margin-bottom: 80px;\r\n  }\r\n`\r\nexport const StyledButton = styled.button`\r\n  //max-height: 40px;\r\n  padding: 10px 40px;\r\n  outline: none;\r\n  color: black;\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  background-color: whitesmoke;\r\n  border: 3px solid black;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  transition: all .4s ease;\r\n  &:hover {\r\n  transform: scale(1.02);\r\n    border-color: #010c84;\r\n  }\r\n`\r\n\r\n\r\nexport default GameOverWindow","import React, {useState} from 'react'\nimport GameField from \"./GameField/GameField\";\nimport GameOverWindow, {StyledButton} from \"./GameOverWindow\";\nimport './App.scss';\n\n\nconst App = () => {\n    const [load, setLoad] = useState(false)\n    const [squares, setSquares] = useState(Array(9).fill(null))\n    const [currentTurn, setTurn] = useState(0)\n    const [gameOver, setGameOver] = useState(false)\n\n    function checkWinCondition() {\n        let winConditions = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [0, 4, 8],\n            [2, 5, 8],\n            [2, 4, 6]\n        ]\n\n        let player = (currentTurn % 2 === 0) ? 'X' : '0'\n\n        for (let i = 0; i < winConditions.length; i++) {\n            const line = winConditions[i]\n            if (copiedSquares[line[0]] === player\n                && copiedSquares[line[1]] === player\n                && copiedSquares[line[2]] === player\n            ) {\n                return setGameOver(true)\n            }\n        }\n        return null\n    }\n\n    let copiedSquares = squares.slice()\n\n    function changeTurn(key) {\n        setTurn(currentTurn + 1)\n        if (currentTurn % 2 === 1) {\n            copiedSquares[key - 1] = '0'\n            setSquares(copiedSquares)\n            checkWinCondition()\n            return 'O'\n        } else {\n            copiedSquares[key - 1] = 'X'\n            setSquares(copiedSquares)\n            checkWinCondition()\n            return 'X'\n        }\n\n    }\n\n    function startNewGame() {\n        setSquares( Array(9).fill(null) )\n        setGameOver(false)\n    }\n\n\n    // debugger\n    return (\n        <div className={'appWrapper'}>\n            <div className={'gameBlock'}>\n                {gameOver ?\n                    <GameOverWindow player={(currentTurn % 2 !== 0) ? '1' : '2'} newGame={startNewGame}/>\n                    :\n                    load ?\n                        <>\n                        <h2>The {(currentTurn % 2 === 0) ? 'first' : 'second'} player`s turn</h2>\n                        <GameField squares={copiedSquares} changeTurn={changeTurn} gameOver={gameOver}/>\n                        </>\n                        :\n                        <StyledButton onClick={() => setLoad(true)} className={'startButton'}>Start game!</StyledButton>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createGlobalStyle} from \"styled-components\";\nimport App from './components/App';\nimport './index.css';\n\nconst Global = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n`\n\nReactDOM.render(\n    <>\n        <Global/>\n        <App/>\n    </>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}